#BlueJ class context
comment0.params=
comment0.target=DREIECK()
comment0.text=\n\ Konstruktor\ der\ Klasse\ <code>DREIECK</code>.\ Erstellt\ ein\ neues\ Dreieck.\n
comment1.params=a_x\ a_y\ b_x\ b_y\ c_x\ c_y
comment1.target=void\ setzeEcken(int,\ int,\ int,\ int,\ int,\ int)
comment1.text=\n\ Setzt\ die\ Ecken\ dieses\ Dreiecks\ (A,\ B,\ C)\ neu.\n\ @param\ \ \ a_x\ Die\ X-Koordinate\ des\ Punktes\ A\n\ @param\ \ \ a_y\ Die\ Y-Koordinate\ des\ Punktes\ A\n\ @param\ \ \ b_x\ Die\ X-Koordinate\ des\ Punktes\ B\n\ @param\ \ \ b_y\ Die\ Y-Koordinate\ des\ Punktes\ B\n\ @param\ \ \ c_x\ Die\ X-Koordinate\ des\ Punktes\ C\n\ @param\ \ \ c_y\ Die\ Y-Koordinate\ des\ Punktes\ C\n
comment10.params=r
comment10.target=boolean\ schneidet(RECHTECK)
comment10.text=\n\ Diese\ Methode\ prueft\ dieses\ Dreieck\ und\ ein\ Rechteck\ auf\ Kollision.\n\ @param\ \ \ r\ \ \ Das\ Rechteck,\ auf\ dessen\ Ueberschneiden\ mit\ dem\ die\ Methode\ ausfuehrenden\ Dreieck\ geprueft\ werden\ soll.\n\ @return\ \ <code>true</code>,\ wenn\ sich\ Dreieck\ und\ Rechteck\ ueberlagern\ -\ also\ schneiden\ -\ sonst\ <code>false</code>.\n
comment11.params=d
comment11.target=boolean\ schneidet(DREIECK)
comment11.text=\n\ Diese\ Methode\ prueft\ dieses\ Dreieck\ und\ ein\ anderes\ Dreieck\ auf\ Kollision.\n\ @param\ \ \ d\ \ \ Das\ Dreieck,\ auf\ dessen\ Ueberschneiden\ mit\ dem\ die\ Methode\ ausfuehrenden\ Dreieck\ geprueft\ werden\ soll.\n\ @return\ \ <code>true</code>,\ wenn\ sich\ beide\ Dreiecke\ ueberlagern\ -\ also\ schneiden\ -\ sonst\ <code>false</code>.\n
comment12.params=k
comment12.target=int\ berechneAbstandX(KREIS)
comment12.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Dreiecks\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Kreises\ in\ x-Richtung\ entfernt\ ist.\n\ @param\ \ \ k\ \ \ Der\ andere\ Kreis\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Dreiecks\ vom\ anderen\ Kreis\ in\ x-Richtung\ (>0,\ wenn\ dieses\ Dreieck\ rechts\ des\ anderen\ Kreises\ liegt)\n
comment13.params=r
comment13.target=int\ berechneAbstandX(RECHTECK)
comment13.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Dreiecks\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Rechtecks\ in\ x-Richtung\ entfernt\ ist.\n\ @param\ \ \ r\ \ \ Das\ andere\ Rechteck\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Dreiecks\ zum\ anderen\ Rechteck\ in\ x-Richtung\ (>0,\ wenn\ dieses\ Dreieck\ rechts\ des\ anderen\ Rechtecks\ liegt)\n
comment14.params=d
comment14.target=int\ berechneAbstandX(DREIECK)
comment14.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Dreiecks\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Dreiecks\ in\ x-Richtung\ entfernt\ ist.\n\ @param\ \ \ d\ \ \ Das\ andere\ Dreieck\n\ @return\ \ Abstand\ (in\ Pixeln)\ der\ beiden\ Dreiecke\ in\ x-Richtung\ (>0,\ wenn\ dieses\ Dreieck\ rechts\ des\ anderen\ Dreiecks\ liegt)\n
comment15.params=k
comment15.target=int\ berechneAbstandY(KREIS)
comment15.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Dreiecks\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Kreises\ in\ y-Richtung\ entfernt\ ist.\n\ @param\ \ \ k\ \ \ Der\ andere\ Kreis\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Dreiecks\ vom\ anderen\ Kreis\ in\ y-Richtung\ (>0,\ wenn\ dieses\ Dreieck\ unter\ dem\ anderen\ Kreis\ liegt)\n
comment16.params=r
comment16.target=int\ berechneAbstandY(RECHTECK)
comment16.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Dreieck\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Rechtecks\ in\ y-Richtung\ entfernt\ ist.\n\ @param\ \ \ r\ \ \ Das\ andere\ Rechteck\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Dreiecks\ vom\ anderen\ Rechteck\ in\ y-Richtung\ (>0,\ wenn\ dieses\ Dreiecks\ unter\ dem\ anderen\ Rechteck\ liegt)\n
comment17.params=d
comment17.target=int\ berechneAbstandY(DREIECK)
comment17.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Dreiecks\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Dreiecks\ in\ y-Richtung\ entfernt\ ist.\n\ @param\ \ \ d\ \ \ Das\ andere\ Dreieck\n\ @return\ \ Abstand\ (in\ Pixeln)\ der\ beiden\ Dreiecke\ in\ y-Richtung\ (>0,\ wenn\ dieses\ Dreieck\ unter\ dem\ anderen\ Dreieck\ liegt)\n
comment2.params=farbeNeu
comment2.target=void\ setzeFarbe(java.lang.String)
comment2.text=\n\ Setzt\ die\ Farbe\ dieses\ Dreiecks\ neu.\n\ @param\ \ \ farbeNeu\ \ \ \ Diese\ Farbe\ erhaelt\ das\ Dreieck\ (z.B.\ "Rot")\n
comment3.params=m_x\ m_y
comment3.target=void\ setzeMittelpunkt(int,\ int)
comment3.text=\n\ Setzt\ den\ Mittelpunkt\ dieses\ Dreieck\ neu.<br\ />\n\ <b>ACHTUNG\!</b><br\ />\n\ Dies\ ist\ <i>nicht</i>\ der\ geometrische\ Mittelpunkt.\ Denkt\ man\ sich\ ein\ Rechteck,\ \n\ das\ man\ "genau\ ueber\ das\ Dreieck"\ spannt,\ sodass\ es\ dieses\ gerade\ von\ allen\ Seiten\ umschliesst,\ \n\ so\ ist\ der\ Mittelpunkt\ <b>dieses\ Rechtecks</b>\ der,\ der\ hier\ neu\ gesetzt\ wird.\n\ @param\ \ \ m_x\ Die\ X-Koordinate\ des\ neuen\ Mittelpunktes\n\ @param\ \ \ m_y\ Die\ Y-Koordinate\ des\ neuen\ Mittelpunktes\n
comment4.params=sichtbarNeu
comment4.target=void\ setzeSichtbar(boolean)
comment4.text=\n\ Setzt,\ ob\ dieses\ Dreieck\ sichtbar\ sein\ soll.\n\ @param\ \ \ sichtbarNeu\ Ist\ dieser\ Wert\ <code>true</code>,\ ist\ nach\ dem\ Aufruf\ dieser\ Methode\ dieses\ Dreieck\ \n\ sichtbar.\ Ist\ dieser\ Wert\ <code>false</code>,\ so\ ist\ nach\ dem\ Aufruf\ dieser\ Methode\ dieses\ Dreieck\ unsichtbar.\n
comment5.params=deltaX\ deltaY
comment5.target=void\ verschiebenUm(int,\ int)
comment5.text=\n\ Verschiebt\ dieses\ Dreieck\ um\ eine\ Verschiebung\ -\ angegeben\ durch\ ein\ "Delta\ X"\ und\ "Delta\ Y".\n\ @param\ \ \ deltaX\ \ Der\ X\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ verschieben\ nach\ rechts,\ negative\ nach\ links.\n\ @param\ \ \ deltaY\ \ Der\ Y\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ verschieben\ nach\ unten,\ negative\ nach\ oben.\n
comment6.params=
comment6.target=ea.edu.DreieckE\ symbol()
comment6.text=\n\ Gibt\ das\ Symbol\ als\ grafisches\ Objekt\ aus.<br\ />\n\ Diese\ Methode\ braucht\ man\ nicht\ nutzen.\n\ @return\ \ Das\ Symbol\ dieses\ Rechtecks.\ Dies\ ist\ ein\ echtes,\ grafisches\ Objekt.\n
comment7.params=
comment7.target=int\ nenneM_x()
comment7.text=\n\ Diese\ Methode\ gibt\ die\ x-Koordinate\ des\ Mittelpunkts\ dieses\ Dreiecks\ zurueck\n\ @return\ \ Die\ aktuelle\ x-Koordinate\ des\ Mittelpunktes\ dieses\ Dreiecks\n
comment8.params=
comment8.target=int\ nenneM_y()
comment8.text=\n\ Diese\ Methode\ gibt\ die\ y-Koordinate\ des\ Mittelpunkts\ dieses\ Kreises\ zurueck\n\ @return\ \ Die\ aktuelle\ y-Koordinate\ des\ Mittelpunktes\ dieses\ Kreises\n
comment9.params=k
comment9.target=boolean\ schneidet(KREIS)
comment9.text=\n\ Diese\ Methode\ prueft\ dieses\ Dreieck\ und\ einen\ weiteren\ Kreis\ auf\ Kollision.\n\ @param\ \ \ k\ \ \ Der\ Kreis,\ auf\ dessen\ Ueberschneiden\ mit\ dem\ die\ Methode\ ausfuehrenden\ Dreieck\ geprueft\ werden\ soll.\n\ @return\ \ <code>true</code>,\ wenn\ sich\ Dreieck\ und\ Kreis\ ueberlagern\ -\ also\ schneiden\ -\ sonst\ <code>false</code>.\n
numComments=18
